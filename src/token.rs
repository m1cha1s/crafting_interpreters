use std::fmt;

#[derive(Debug, Clone)]
pub enum Token {
    LeftParen { line: u32 },
    RightParen { line: u32 },
    LeftBrace { line: u32 },
    RightBrace { line: u32 },
    Comma { line: u32 },
    Dot { line: u32 },
    Minus { line: u32 },
    Plus { line: u32 },
    Semicolon { line: u32 },
    Slash { line: u32 },
    Star { line: u32 },
    Bang { line: u32 },
    BangEqual { line: u32 },
    Equal { line: u32 },
    EqualEqual { line: u32 },
    Greater { line: u32 },
    GreaterEqual { line: u32 },
    Less { line: u32 },
    LessEqual { line: u32 },
    Identifier { line: u32 },
    String { line: u32, value: String },
    Number { line: u32, value: f32 },
    And { line: u32 },
    Class { line: u32 },
    Else { line: u32 },
    False { line: u32 },
    Fun { line: u32 },
    For { line: u32 },
    If { line: u32 },
    Nil { line: u32 },
    Or { line: u32 },
    Print { line: u32 },
    Return { line: u32 },
    Super { line: u32 },
    This { line: u32 },
    True { line: u32 },
    Var { line: u32 },
    While { line: u32 },
    Eof { line: u32 },
}

impl fmt::Display for Token {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        match self {
            Token::LeftParen { .. } => write!(f, "("),
            Token::RightParen { .. } => write!(f, ")"),
            Token::LeftBrace { .. } => write!(f, "{{"),
            Token::RightBrace { .. } => write!(f, "}}"),
            Token::Comma { .. } => write!(f, ","),
            Token::Dot { .. } => write!(f, "."),
            Token::Minus { .. } => write!(f, "-"),
            Token::Plus { .. } => write!(f, "+"),
            Token::Semicolon { .. } => write!(f, ";"),
            Token::Slash { .. } => write!(f, "/"),
            Token::Star { .. } => write!(f, "*"),
            Token::Bang { .. } => write!(f, "!"),
            Token::BangEqual { .. } => write!(f, "!="),
            Token::Equal { .. } => write!(f, "="),
            Token::EqualEqual { .. } => write!(f, "=="),
            Token::Greater { .. } => write!(f, ">"),
            Token::GreaterEqual { .. } => write!(f, ">="),
            Token::Less { .. } => write!(f, "<"),
            Token::LessEqual { .. } => write!(f, "<="),
            Token::Identifier { .. } => write!(f, "Ident"),
            Token::String { value, .. } => write!(f, "\"{}\"", value),
            Token::Number { value, .. } => write!(f, "{}", value),
            Token::And { .. } => write!(f, "and"),
            Token::Class { .. } => write!(f, "class"),
            Token::Else { .. } => write!(f, "else"),
            Token::False { .. } => write!(f, "false"),
            Token::Fun { .. } => write!(f, "fun"),
            Token::For { .. } => write!(f, "for"),
            Token::If { .. } => write!(f, "if"),
            Token::Nil { .. } => write!(f, "nil"),
            Token::Or { .. } => write!(f, "or"),
            Token::Print { .. } => write!(f, "print"),
            Token::Return { .. } => write!(f, "return"),
            Token::Super { .. } => write!(f, "super"),
            Token::This { .. } => write!(f, "this"),
            Token::True { .. } => write!(f, "true"),
            Token::Var { .. } => write!(f, "var"),
            Token::While { .. } => write!(f, "while"),
            Token::Eof { .. } => write!(f, "eof"),
        }
    }
}
